

#include <iostream>
#include<vector>
#include<string>
using namespace std;
vector<char> operat;
vector<int> num;
/**
这个函数用来比较运算符的优先级
**/
bool f(char c1,char c2)
{
    if(c1=='*')
    {
        return true;
    }
    else
    {
       if(c2=='*')
        {
            return false;
        }
        else
        {
            return true;
        }
    }
}
/**
这个函数用来计算：从数字栈弹出两个数字，从符号栈弹出一个符号，进行运算
**/
int f_compute()
{
    int a=num.back();
    num.pop_back();
    int b=num.back();
    num.pop_back();
    char op=operat.back();
    operat.pop_back();
    int result=0;
    if(op=='*')
    {
        result=a*b;
    }
    else if(op=='-')//注意减法的运算顺序：是b-a，而并不是a-b;
    {
        result=b-a;
    }
    else
    {
    result=a+b;
    }
     num.push_back(result);
}
int main()
{
    string str="";
    cin>>str;
    int length=str.length();
    //最外层for循环，从第一个字符开始，依次访问到最后一个字符
    for(int i=0;i<length;i++)
    {
    //如果是数字，就压入数字栈
        if((str[i]>=48)&&(str[i]<=57))
        {
        //注意一个数字可能是多位数，比如100-+4*5这个表达式，100就是多位数，我们要把符号转换成数字
            int number=0;
            while(i<length&&((str[i]>=48)&&(str[i]<=57)))
            {
                number=number*10+(str[i]-'0');
                i++;
            }
            //压入数字栈
            num.push_back(number);
            i--;
        }
        else
        {
        //如果是符号，就应该压入符号栈
        //如果栈为空，则直接压入
            if(operat.empty())
            {
                operat.push_back(str[i]);
            }
            else//否则将栈顶优先级高于当前符号的运算符进行运算操作
            {
                char c=operat.back();
                bool flag=f(c,str[i]);

                while(flag==true)
                {
                  f_compute();

                if(operat.empty())//栈变为空，或者栈顶符号的优先级低于当前运算符的优先级，循环结束
                {
                    flag=false;
                }
                else
                {
                    c=operat.back();
                    flag=f(c,str[i]);
                }
              }
              //将 当前符号压入栈
            operat.push_back(str[i]);
            }
        }
    }
/**
为什么需要while循环：运行一遍例子（7-8+3*6）就知道了
**/
    while(!operat.empty())
   {
        f_compute();
   }
   //将最后栈里面的元素输出来，就是表达式结果
    cout<<num.back();
    return 0;
}
